{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nvar defineProperty = require( '@stdlib/utils-define-property' );\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils-define-nonenumerable-read-only-accessor' );\nvar isPositive = require( '@stdlib/assert-is-positive-number' ).isPrimitive;\nvar entropy = require( '@stdlib/stats-base-dists-pareto-type1-entropy' );\nvar kurtosis = require( '@stdlib/stats-base-dists-pareto-type1-kurtosis' );\nvar mean = require( '@stdlib/stats-base-dists-pareto-type1-mean' );\nvar median = require( '@stdlib/stats-base-dists-pareto-type1-median' );\nvar mode = require( '@stdlib/stats-base-dists-pareto-type1-mode' );\nvar skewness = require( '@stdlib/stats-base-dists-pareto-type1-skewness' );\nvar variance = require( '@stdlib/stats-base-dists-pareto-type1-variance' );\nvar cdf = require( '@stdlib/stats-base-dists-pareto-type1-cdf' );\nvar logcdf = require( '@stdlib/stats-base-dists-pareto-type1-logcdf' );\nvar logpdf = require( '@stdlib/stats-base-dists-pareto-type1-logpdf' );\nvar pdf = require( '@stdlib/stats-base-dists-pareto-type1-pdf' );\nvar quantile = require( '@stdlib/stats-base-dists-pareto-type1-quantile' );\nvar format = require( '@stdlib/string-format' );\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {Probability} evaluated CDF\n*/\nfunction paretoCDF( x ) {\n\treturn cdf( x, this.alpha, this.beta );\n}\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {Probability} evaluated logCDF\n*/\nfunction paretoLogCDF( x ) {\n\treturn logcdf( x, this.alpha, this.beta );\n}\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n*/\nfunction paretoLogPDF( x ) {\n\treturn logpdf( x, this.alpha, this.beta );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction paretoPDF( x ) {\n\treturn pdf( x, this.alpha, this.beta );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction paretoQuantile( p ) {\n\treturn quantile( p, this.alpha, this.beta );\n}\n\n\n// MAIN //\n\n/**\n* Pareto (Type I) distribution constructor.\n*\n* @constructor\n* @param {PositiveNumber} [alpha=1.0] - shape parameter\n* @param {PositiveNumber} [beta=1.0] - scale parameter\n* @throws {TypeError} `alpha` must be a positive number\n* @throws {TypeError} `beta` must be a positive number\n* @returns {Pareto1} distribution instance\n*\n* @example\n* var pareto1 = new Pareto1( 1.0, 1.0 );\n*\n* var y = pareto1.cdf( 0.8 );\n* // returns 0.0\n*\n* var mu = pareto1.mean;\n* // returns Infinity\n*/\nfunction Pareto1() {\n\tvar alpha;\n\tvar beta;\n\tif ( !(this instanceof Pareto1) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Pareto1();\n\t\t}\n\t\treturn new Pareto1( arguments[ 0 ], arguments[ 1 ] );\n\t}\n\tif ( arguments.length ) {\n\t\talpha = arguments[ 0 ];\n\t\tbeta = arguments[ 1 ];\n\t\tif ( !isPositive( alpha ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First shape parameter must be a positive number. Value: `%s`.', alpha ) );\n\t\t}\n\t\tif ( !isPositive( beta ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second shape parameter must be a positive number. Value: `%s`.', beta ) );\n\t\t}\n\t} else {\n\t\talpha = 1.0;\n\t\tbeta = 1.0;\n\t}\n\tdefineProperty( this, 'alpha', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn alpha;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\talpha = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'beta', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn beta;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tbeta = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Pareto (Type I) distribution differential entropy.\n*\n* @name entropy\n* @memberof Pareto1.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var pareto1 = new Pareto1( 4.0, 12.0 );\n*\n* var v = pareto1.entropy;\n* // returns ~2.349\n*/\nsetReadOnlyAccessor( Pareto1.prototype, 'entropy', function get() {\n\treturn entropy( this.alpha, this.beta );\n});\n\n/**\n* Pareto (Type I) distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof Pareto1.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var pareto1 = new Pareto1( 4.0, 12.0 );\n*\n* var v = pareto1.kurtosis;\n* // returns NaN\n*/\nsetReadOnlyAccessor( Pareto1.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.alpha, this.beta );\n});\n\n/**\n* Pareto (Type I) distribution expected value.\n*\n* @name mean\n* @memberof Pareto1.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var pareto1 = new Pareto1( 4.0, 12.0 );\n*\n* var v = pareto1.mean;\n* // returns 16.0\n*/\nsetReadOnlyAccessor( Pareto1.prototype, 'mean', function get() {\n\treturn mean( this.alpha, this.beta );\n});\n\n/**\n* Pareto (Type I) distribution median.\n*\n* @name median\n* @memberof Pareto1.prototype\n* @type {number}\n* @see [median]{@link https://en.wikipedia.org/wiki/Median}\n*\n* @example\n* var pareto1 = new Pareto1( 4.0, 12.0 );\n*\n* var v = pareto1.median;\n* // returns ~14.27\n*/\nsetReadOnlyAccessor( Pareto1.prototype, 'median', function get() {\n\treturn median( this.alpha, this.beta );\n});\n\n/**\n* Pareto (Type I) distribution mode.\n*\n* @name mode\n* @memberof Pareto1.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var pareto1 = new Pareto1( 4.0, 12.0 );\n*\n* var v = pareto1.mode;\n* // returns 12.0\n*/\nsetReadOnlyAccessor( Pareto1.prototype, 'mode', function get() {\n\treturn mode( this.alpha, this.beta );\n});\n\n/**\n* Pareto (Type I) distribution skewness.\n*\n* @name skewness\n* @memberof Pareto1.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var pareto1 = new Pareto1( 4.0, 12.0 );\n*\n* var v = pareto1.skewness;\n* // returns ~7.071\n*/\nsetReadOnlyAccessor( Pareto1.prototype, 'skewness', function get() {\n\treturn skewness( this.alpha, this.beta );\n});\n\n/**\n* Pareto (Type I) distribution variance.\n*\n* @name variance\n* @memberof Pareto1.prototype\n* @type {number}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var pareto1 = new Pareto1( 4.0, 12.0 );\n*\n* var v = pareto1.variance;\n* // returns 32.0\n*/\nsetReadOnlyAccessor( Pareto1.prototype, 'variance', function get() {\n\treturn variance( this.alpha, this.beta );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Pareto1.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var pareto1 = new Pareto1( 2.0, 4.0 );\n*\n* var v = pareto1.cdf( 4.0 );\n* // returns 0.0\n*/\nsetReadOnly( Pareto1.prototype, 'cdf', paretoCDF );\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @name logcdf\n* @memberof Pareto1.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var pareto1 = new Pareto1( 2.0, 4.0 );\n*\n* var v = pareto1.logcdf( 4.0 );\n* // returns -Infinity\n*/\nsetReadOnly( Pareto1.prototype, 'logcdf', paretoLogCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @name logpdf\n* @memberof Pareto1.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var pareto1 = new Pareto1( 2.0, 4.0 );\n*\n* var v = pareto1.logpdf( 5.0 );\n* // returns ~-1.363\n*/\nsetReadOnly( Pareto1.prototype, 'logpdf', paretoLogPDF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof Pareto1.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var pareto1 = new Pareto1( 2.0, 4.0 );\n*\n* var v = pareto1.pdf( 5.0 );\n* // returns ~0.256\n*/\nsetReadOnly( Pareto1.prototype, 'pdf', paretoPDF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Pareto1.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var pareto1 = new Pareto1( 2.0, 4.0 );\n*\n* var v = pareto1.quantile( 0.5 );\n* // returns ~5.657\n*/\nsetReadOnly( Pareto1.prototype, 'quantile', paretoQuantile );\n\n\n// EXPORTS //\n\nmodule.exports = Pareto1;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Pareto (Type I) distribution constructor.\n*\n* @module @stdlib/stats-base-dists-pareto-type1-ctor\n*\n* @example\n* var Pareto1 = require( '@stdlib/stats-base-dists-pareto-type1-ctor' );\n*\n* var pareto1 = new Pareto1( 1.0, 1.0 );\n*\n* var y = pareto1.cdf( 10.0 );\n* // returns 0.9\n*\n* var mu = pareto1.mean;\n* // returns Infinity\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_main", "__commonJSMin", "exports", "module", "defineProperty", "setReadOnly", "setReadOnlyAccessor", "isPositive", "entropy", "kurtosis", "mean", "median", "mode", "skewness", "variance", "cdf", "logcdf", "logpdf", "pdf", "quantile", "format", "paretoCDF", "x", "paretoLogCDF", "paretoLogPDF", "paretoPDF", "paretoQuantile", "p", "Pareto1", "alpha", "beta", "value", "main"]
}
